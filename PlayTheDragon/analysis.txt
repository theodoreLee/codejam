Play the Dragon: Analysis

Small dataset

The Small limits are large enough to foil pure simulation of all possible choices, so we need to have some insights before proceeding.
스몰 데이터셋의 제한은 가능한한 선택들의 시뮬레이션이 충분하게 합니다, 따라서 우리는 진행하기 전에 직관을 가질 필요가 있습니다.
The dragon should cure only when it is forced to — that is, when the knight's next attack would defeat it, and attacking or debuffing would not prevent that.
드레곤은 회복할꺼에요 오직 다음 기사의 공격으로 패배할때, 그리고 공격이나 디버프로 패배를 막을 수 없을 때
Otherwise, it is always better to do something else.
다른 경우는 항상 다른일을 하는게 더 낫죠.
All buffs should come before all attacks, so that each of the dragon's attacks gets the benefit of all of the buffs.
모든 버프는 모든 공격을 하기 전에 해야해요, 각각의  드래곤의 공격은 버프의 이득을 얻을수 있도록 말이죠.

The number of buffs directly determines the number of attacks needed.
버프의 수는 즉시 결정할수 있습니다  필요한  공격 횟수. **

All debuffs should come before all buffs/attacks, so that the total amount of damage the dragon must withstand is minimized.
모든 디버프는 항상 버프나 공격보다 먼저 와야해요, 전체 반드시 견뎌야할 드래곤이 받는 데미지를 초소로 할 수 있도록 합니다.
If the knight's first attack will defeat the dragon even if the dragon attacks or debuffs in the first turn, the case is impossible.
심지어 드래곤이 어택이나 디버프를 첫번째 턴에 한다고 해도, 만약 기사의 첫번째 공격에 드래곤을 물리친다면,이 경우는 불가능합니다.
If the dragon is forced to cure two turns in a row, then the case is impossible, since that implies that the dragon will have to cure every turn.
만약 드래곤이 회복을 두턴 연다라 하게 된다면 이 캐이스도 불가능합니다, 그것은 드래곤이 매턴 회복해야함을 암시하기 때문입니다.
These observations add up to a strategy: spend some number D' of turns debuffing, then some number B' of turns buffing, then some number A' of turns attacking, and interleave cures only as needed to not be defeated.
이러한 관측은 (add up to 결국 ~가 되다) 하나의 전략이 됩니다 : D'(몇번의 디버핑), B' 몇번의 버핑. 그리고 A' 몇번의 공격 그리고 사이사이에 회복 오직 패배하지 않을 정도로만
Since B' determines A', we only need to consider (D', B') pairs.
버프가 공격을 결정하기 때문에, 우리는 오직 D', B'만 고려하면 됩니다.

Since Ak cannot exceed 100, there is no reason to ever do more than 100 debuffs or 100 buffs; moreover, the worst-case scenario can't possibly require more than a couple hundred turns (D' + B' + A').
기사의 공격력이 100을 초과할수 없기 때문에, 100번 이상의 디버프나 100번 이상의 버프를 할 이유가 없습니다; 게다가 최악의 시나리오는 아마 200턴을 넘지 않을 겁니다

We can place much smaller upper bounds than those with a little more thought, but it is already clear that direct simulation should be fast enough for the Small dataset.
우리는 사고를 통하여 조금더 상한을 줄일수 있습니다, 하지만 이것은 이미 명확합니다 / 직접적인 시뮬레이션이 스몰 데이터셋에 충분히 빠르다는 것이.
So, we can proceed with translating the above strategy into code. We must take care to prioritize actions in the right order. In particular, we must avoid curing when we do not need to or failing to cure when we should.
그래서 우리는 징행할수 있습니다 위의 전략들을 코드로 변경하여서. 우리는 반드시 바른 순서에 우선적인 엑션에 신경써야 합니다. 특히 우리는 반드시 회피해야합니다 필요 없거나 실패할때,
 Once that is written, we can simulate each possible (D', B') pair and find the global minimum number of turns, or determine that the case is IMPOSSIBLE.
 한번 작성한다면, 우리는 우리는 가능한 D',B' pair를 시뮬레이트 할 수 있습니다. 그리고 전체적으로 가장 작은 횟수의 턴을 찾을 수 있습니다, 또는 불가능한 경우를 결정할 수 있습니다.

Large dataset

We noted above that all debuffs should come before all buffs/attacks, and that the number of buffs determines the number of attacks.
우리는 상단에 적어놨습니다/ 모든 디버프는 버프나 어택 이전에 와야 한다는 것을, 그리고 버프는 공격의 횟수를 결정한다는 것을
In fact, the buff/attack part of the problem is independent of the debuff part of the problem.
사실, 버프와 공격 파트의 문제는 디버프 파트의 문제와 독립적입니다
Changing the number of debuffs may change the number of cures, but regardless of how many times we debuff, we have nothing to gain by using more than the minimum number of buff + attack turns;
디버프의 횟수를 변경하는 것은 아마 회복하는 횟수를 변경할 겁니다, 그러나 우리가 얼마나 많은 디버프를 하고 안하고에 관계없이, 우리는 얻는 것이 없습니다. 최소횟수의 버프 + 공격 턴을 사용하는 것에;
that would just make us waste more turns curing.
그것은 그저 우리를 탄ㅇㄹ 허벅히야 낭비하게 만듭니다.

We can find this minimum number of buff + attack turns as follows.
우리는 최소한의 버프와 공격을 찾을 수있습니다.

First, we suppose that we will buff 0 times, and we determine the total number of attacks needed to defeat the knight.
먼저, 우리는 가정합니다 우리가 버프를 0번했다고, 그리고 우리가 물리치기 위한 전체 횟수를 결정합니다.
 Then, we can repeatedly increase B' by 1 and calculate the number of attack turns A' required at that new level of attack power.
 그러면, 우리는 반복적으로 버프를 1씩 증가시킵니다. 그리고 계산합니다 공격 턴의 횟수를,

 As soon as this causes the total to get larger, we can stop (and take the previous total).
 이러한 케이스는 금방 합계가 커지는 원인이 됩니다. 우리는 멈출수 있습니다.
 It is safe to stop at that point because the total number of turns is given by
 이것은 안전하게 멈춥니다 그 지점에서 주어진 최대 넘버의 턴은

B' + ceil(Hk / (Ad + B' × B))
B' + ceil(Hk / (Ad + B' * B))

The B' part contributes a line with positive slope;
B' 파트는 긍정적인 경사의 라인에 기여합니다?;**

the rest contributes a decaying step function.

If that step function were a smooth curve, there would be one point at which the rate of decrease from the curve exactly matched the rate of increase from the linear part, and the function would take on our desired minimum there.
먼역 부드럽게 휘어진다면, 거기에 한점이 있을꺼에요 디크리
Because of the discretization, there may actually be multiple values of B' that yield the minimum number of B' + A' turns, but it does not matter which one we choose; only the total matters.

Finding the minimum B' + A' in this way takes O(sqrt(N)) time,

where N is the common upper limit for all of the parameters (109 for the Large).

This is because once we have raised B' to about sqrt(N), we can defeat the knight in about sqrt(N) attack rounds,

and there is no need to buff further. It is also possible to solve this part of the problem using binary search or ternary search, or by solving a quadratic equation.

What about the number D' of debuffs? The key observation here is that we do not need to consider every possible value of D'. For instance, suppose that Hd is 100, Ak = 50, and D = 1.

Reducing Ak to 49 (which takes 1 turn of debuffing) is as good as reducing Ak to 48 or 34;

in all of these cases, the dragon has to cure every other turn.

However, reducing Ak to 33 (which takes 17 turns of debuffing) means that the dragon only has to cure on every third turn.

We might as well only consider these threshold values of D' = 0, 1, 17, 26, 31...; we can leave out the others.

We can find each of these values formulaically in constant time.

Once we have these values, we do not even need to simulate them independently.

Note that a simulation with D' = 17 begins by looking like a simulation with D' = 1, since we have to do one debuff before we do the other sixteen.

So we can perform a single simulation in which we keep track of a number T of turns used so far, and repeat the following:

Pretend that we will do no more debuffing. Figure out how many additional turns are needed to buff + attack while curing enough to survive.

Compare the total (T plus that number) to the best total we have seen so far.
Figure out how many turns are needed to increase the number of debuffs to the next threshold value, while curing enough to survive. Add that number to T.
It takes additional turns to debuff more, but that debuffing may "pay for itself" by saving curing turns during the buff + attack phase.
Our strategy will find the right balance.

Instead of actually simulating the turns, we can take advantage of the way we have chosen threshold values of D':
in the debuffing period between two of our values of D', the frequency of curing remains constant.

So we can calculate the total number of debuff turns + cures via a formula,
 and we can do the same for the number of cures in the buff + attack phase. With this optimization, the complexity of this step is O(sqrt(N)); since we also took O(sqrt(N)) time to find the optimal number of B' + A' turns, the algorithm is O(sqrt(N)) overall.

All that remains is to actually implement the above, which is perhaps even harder than coming up with the algorithm; there are many opportunities to make off-by-one errors! Although this is not generally the case in Code Jam, in this particular problem, the limits do allow solutions with some but not all of the above insights, and additional low-level optimizations, to pass within the 8-minute window.